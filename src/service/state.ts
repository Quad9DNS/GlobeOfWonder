import { PointData } from "../data";
import { CameraPosition, normalize } from "../data/camera";
import { Settings } from "../settings";

/**
 * Global app state. Enables sharing data between data sources and the globe.
 */
export class AppState {
  /**
   * All new globe data should be pushed into this queue. Globe is expected to periodically take items out of this queue.
   */
  newPointsQueue: PointData[] = [];
  /**
   * All new incoming data should be pushed into this queue (only counts). This is used to update event counter.
   */
  newEventsQueue: number[] = [];
  /**
   * If new camera positions are requested programatically, they need to be pushed into this queue.
   * Globe should periodically process this queue.
   */
  newCameraPositionsQueue: CameraPosition[] = [];
  /**
   * Represents current globe zoom factor - to enable access to it to components other than the globe.
   */
  globeCurrentZoomFactor = 0;
}

/**
 * Creates a new {@link AppState} instance, based on the provided {@link Settings}.
 * Takes camera startup position from the settings and pushes it into the camera positions queue.
 */
export function createState(settings: Settings) {
  const state = new AppState();
  state.newCameraPositionsQueue.push(
    normalize({
      lat: settings.startupLat,
      lon: settings.startupLon,
      zoom: settings.startupZoom,
      instant_move: true,
    }),
  );
  return state;
}

/**
 * Service state. Should be maintained per data service, to keep track of configured filters.
 */
export class ServiceState {
  /**
   * Whether the filters are configured for this data source.
   */
  filtersConfigured: boolean = false;
  /**
   * Filters generated by this data source.
   */
  filterKeys: string[] = [];

  /**
   * Updates filters for this service
   */
  updateFilters(newKeys: string[]) {
    for (const key in this.filterKeys) {
      if (!newKeys.includes(key)) {
        this.filterKeys = [];
        break;
      }
    }

    this.filterKeys.push(...newKeys);
  }
}
